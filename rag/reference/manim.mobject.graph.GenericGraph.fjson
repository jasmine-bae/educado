{"parents": [{"link": "../", "title": "Reference Manual"}, {"link": "../../reference_index/mobjects/", "title": "Mobjects"}, {"link": "../manim.mobject.graph/", "title": "graph"}], "prev": {"link": "../manim.mobject.graph.DiGraph/", "title": "DiGraph"}, "next": {"link": "../manim.mobject.graph.Graph/", "title": "Graph"}, "title": "GenericGraph", "meta": {}, "body": "<section id=\"genericgraph\">\n<h1>GenericGraph<a class=\"headerlink\" href=\"#genericgraph\" title=\"Link to this heading\">\u00b6</a></h1>\n<p>Qualified name: <code class=\"docutils literal notranslate\"><span class=\"pre\">manim.mobject.graph.GenericGraph</span></code></p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">GenericGraph</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edges</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">labels=False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">label_fill_color=ManimColor('#000000')</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout='spring'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout_scale=2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout_config=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_type=&lt;class</span> <span class=\"pre\">'manim.mobject.geometry.arc.Dot'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_config=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_mobjects=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_type=&lt;class</span> <span class=\"pre\">'manim.mobject.geometry.line.Line'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">partitions=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">root_vertex=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_config=None</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../manim.mobject.types.vectorized_mobject.VMobject/#manim.mobject.types.vectorized_mobject.VMobject\" title=\"manim.mobject.types.vectorized_mobject.VMobject\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">VMobject</span></code></a></p>\n<p>Abstract base class for graphs (that is, a collection of vertices\nconnected with edges).</p>\n<p>Graphs can be instantiated by passing both a list of (distinct, hashable)\nvertex names, together with list of edges (as tuples of vertex names). See\nthe examples for concrete implementations of this class for details.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>This implementation uses updaters to make the edges move with\nthe vertices.</p>\n</div>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<p><a class=\"reference internal\" href=\"../manim.mobject.graph.Graph/#manim.mobject.graph.Graph\" title=\"manim.mobject.graph.Graph\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Graph</span></code></a>, <a class=\"reference internal\" href=\"../manim.mobject.graph.DiGraph/#manim.mobject.graph.DiGraph\" title=\"manim.mobject.graph.DiGraph\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiGraph</span></code></a></p>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>vertices</strong> (<em>list</em><em>[</em><em>Hashable</em><em>]</em>) \u2013 A list of vertices. Must be hashable elements.</p></li>\n<li><p><strong>edges</strong> (<em>list</em><em>[</em><em>tuple</em><em>[</em><em>Hashable</em><em>, </em><em>Hashable</em><em>]</em><em>]</em>) \u2013 A list of edges, specified as tuples <code class=\"docutils literal notranslate\"><span class=\"pre\">(u,</span> <span class=\"pre\">v)</span></code> where both <code class=\"docutils literal notranslate\"><span class=\"pre\">u</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">v</span></code> are vertices.</p></li>\n<li><p><strong>labels</strong> (<em>bool</em><em> | </em><em>dict</em>) \u2013 Controls whether or not vertices are labeled. If <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> (the default),\nthe vertices are not labeled; if <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> they are labeled using their\nnames (as specified in <code class=\"docutils literal notranslate\"><span class=\"pre\">vertices</span></code>) via <a class=\"reference internal\" href=\"../manim.mobject.text.tex_mobject.MathTex/#manim.mobject.text.tex_mobject.MathTex\" title=\"manim.mobject.text.tex_mobject.MathTex\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MathTex</span></code></a>. Alternatively,\ncustom labels can be specified by passing a dictionary whose keys are\nthe vertices, and whose values are the corresponding vertex labels\n(rendered via, e.g., <a class=\"reference internal\" href=\"../manim.mobject.text.text_mobject.Text/#manim.mobject.text.text_mobject.Text\" title=\"manim.mobject.text.text_mobject.Text\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Text</span></code></a> or <a class=\"reference internal\" href=\"../manim.mobject.text.tex_mobject.Tex/#manim.mobject.text.tex_mobject.Tex\" title=\"manim.mobject.text.tex_mobject.Tex\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tex</span></code></a>).</p></li>\n<li><p><strong>label_fill_color</strong> (<em>str</em>) \u2013 Sets the fill color of the default labels generated when <code class=\"docutils literal notranslate\"><span class=\"pre\">labels</span></code>\nis set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. Has no effect for other values of <code class=\"docutils literal notranslate\"><span class=\"pre\">labels</span></code>.</p></li>\n<li><p><strong>layout</strong> (<em>LayoutName</em><em> | </em><em>dict</em><em>[</em><em>Hashable</em><em>, </em><em>Point3D</em><em>] </em><em>| </em><a class=\"reference internal\" href=\"../manim.mobject.graph.LayoutFunction/#manim.mobject.graph.LayoutFunction\" title=\"manim.mobject.graph.LayoutFunction\"><em>LayoutFunction</em></a>) \u2013 Either one of <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;spring&quot;</span></code> (the default), <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;circular&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;kamada_kawai&quot;</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;planar&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;random&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;shell&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;spectral&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;spiral&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;tree&quot;</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;partite&quot;</span></code>\nfor automatic vertex positioning primarily using <code class=\"docutils literal notranslate\"><span class=\"pre\">networkx</span></code>\n(see <a class=\"reference external\" href=\"https://networkx.org/documentation/stable/reference/drawing.html#module-networkx.drawing.layout\">their documentation</a>\nfor more details), a dictionary specifying a coordinate (value)\nfor each vertex (key) for manual positioning, or a .:class:<cite>~.LayoutFunction</cite> with a user-defined automatic layout.</p></li>\n<li><p><strong>layout_config</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 Only for automatic layouts. A dictionary whose entries\nare passed as keyword arguments to the named layout or automatic layout function\nspecified via <code class=\"docutils literal notranslate\"><span class=\"pre\">layout</span></code>.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">tree</span></code> layout also accepts a special parameter <code class=\"docutils literal notranslate\"><span class=\"pre\">vertex_spacing</span></code>\npassed as a keyword argument inside the <code class=\"docutils literal notranslate\"><span class=\"pre\">layout_config</span></code> dictionary.\nPassing a tuple <code class=\"docutils literal notranslate\"><span class=\"pre\">(space_x,</span> <span class=\"pre\">space_y)</span></code> as this argument overrides\nthe value of <code class=\"docutils literal notranslate\"><span class=\"pre\">layout_scale</span></code> and ensures that vertices are arranged\nin a way such that the centers of siblings in the same layer are\nat least <code class=\"docutils literal notranslate\"><span class=\"pre\">space_x</span></code> units apart horizontally, and neighboring layers\nare spaced <code class=\"docutils literal notranslate\"><span class=\"pre\">space_y</span></code> units vertically.</p></li>\n<li><p><strong>layout_scale</strong> (<em>float</em><em> | </em><em>tuple</em><em>[</em><em>float</em><em>, </em><em>float</em><em>, </em><em>float</em><em>]</em>) \u2013 The scale of automatically generated layouts: the vertices will\nbe arranged such that the coordinates are located within the\ninterval <code class=\"docutils literal notranslate\"><span class=\"pre\">[-scale,</span> <span class=\"pre\">scale]</span></code>. Some layouts accept a tuple <code class=\"docutils literal notranslate\"><span class=\"pre\">(scale_x,</span> <span class=\"pre\">scale_y)</span></code>\ncausing the first coordinate to be in the interval <code class=\"docutils literal notranslate\"><span class=\"pre\">[-scale_x,</span> <span class=\"pre\">scale_x]</span></code>,\nand the second in <code class=\"docutils literal notranslate\"><span class=\"pre\">[-scale_y,</span> <span class=\"pre\">scale_y]</span></code>. Default: 2.</p></li>\n<li><p><strong>vertex_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>) \u2013 The mobject class used for displaying vertices in the scene.</p></li>\n<li><p><strong>vertex_config</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 Either a dictionary containing keyword arguments to be passed to\nthe class specified via <code class=\"docutils literal notranslate\"><span class=\"pre\">vertex_type</span></code>, or a dictionary whose keys\nare the vertices, and whose values are dictionaries containing keyword\narguments for the mobject related to the corresponding vertex.</p></li>\n<li><p><strong>vertex_mobjects</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 A dictionary whose keys are the vertices, and whose values are\nmobjects to be used as vertices. Passing vertices here overrides\nall other configuration options for a vertex.</p></li>\n<li><p><strong>edge_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>) \u2013 The mobject class used for displaying edges in the scene.</p></li>\n<li><p><strong>edge_config</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 Either a dictionary containing keyword arguments to be passed\nto the class specified via <code class=\"docutils literal notranslate\"><span class=\"pre\">edge_type</span></code>, or a dictionary whose\nkeys are the edges, and whose values are dictionaries containing\nkeyword arguments for the mobject related to the corresponding edge.</p></li>\n<li><p><strong>partitions</strong> (<em>list</em><em>[</em><em>list</em><em>[</em><em>Hashable</em><em>]</em><em>] </em><em>| </em><em>None</em>)</p></li>\n<li><p><strong>root_vertex</strong> (<em>Hashable</em><em> | </em><em>None</em>)</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<div class=\"table-wrapper autosummary longtable docutils container\">\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.add_edges\" title=\"manim.mobject.graph.GenericGraph.add_edges\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_edges</span></code></a></p></td>\n<td><p>Add new edges to the graph.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.add_vertices\" title=\"manim.mobject.graph.GenericGraph.add_vertices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_vertices</span></code></a></p></td>\n<td><p>Add a list of vertices to the graph.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.change_layout\" title=\"manim.mobject.graph.GenericGraph.change_layout\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">change_layout</span></code></a></p></td>\n<td><p>Change the layout of this graph.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.from_networkx\" title=\"manim.mobject.graph.GenericGraph.from_networkx\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_networkx</span></code></a></p></td>\n<td><p>Build a <a class=\"reference internal\" href=\"../manim.mobject.graph.Graph/#manim.mobject.graph.Graph\" title=\"manim.mobject.graph.Graph\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Graph</span></code></a> or <a class=\"reference internal\" href=\"../manim.mobject.graph.DiGraph/#manim.mobject.graph.DiGraph\" title=\"manim.mobject.graph.DiGraph\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiGraph</span></code></a> from a given <code class=\"docutils literal notranslate\"><span class=\"pre\">networkx</span></code> graph.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.remove_edges\" title=\"manim.mobject.graph.GenericGraph.remove_edges\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_edges</span></code></a></p></td>\n<td><p>Remove several edges from the graph.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.remove_vertices\" title=\"manim.mobject.graph.GenericGraph.remove_vertices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_vertices</span></code></a></p></td>\n<td><p>Remove several vertices from the graph.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p class=\"rubric\">Attributes</p>\n<div class=\"table-wrapper autosummary longtable docutils container\">\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">animate</span></code></p></td>\n<td><p>Used to animate the application of any method of <code class=\"code docutils literal notranslate\"><span class=\"pre\">self</span></code>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">animation_overrides</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">color</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">depth</span></code></p></td>\n<td><p>The depth of the mobject.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fill_color</span></code></p></td>\n<td><p>If there are multiple colors (for gradient) this returns the first one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">height</span></code></p></td>\n<td><p>The height of the mobject.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">n_points_per_curve</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sheen_factor</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">stroke_color</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">width</span></code></p></td>\n<td><p>The width of the mobject.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph._add_edge\">\n<span class=\"sig-name descname\"><span class=\"pre\">_add_edge</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_type=&lt;class</span> <span class=\"pre\">'manim.mobject.geometry.line.Line'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_config=None</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph._add_edge\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph._add_edge\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Add a new edge to the graph.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>edge</strong> (<em>tuple</em><em>[</em><em>Hashable</em><em>, </em><em>Hashable</em><em>]</em>) \u2013 The edge (as a tuple of vertex identifiers) to be added. If a non-existing\nvertex is passed, a new vertex with default settings will be created. Create\nnew vertices yourself beforehand to customize them.</p></li>\n<li><p><strong>edge_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>) \u2013 The mobject class used for displaying edges in the scene.</p></li>\n<li><p><strong>edge_config</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 A dictionary containing keyword arguments to be passed\nto the class specified via <code class=\"docutils literal notranslate\"><span class=\"pre\">edge_type</span></code>.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>A group containing all newly added vertices and edges.</p>\n</dd>\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"../manim.mobject.mobject.Group/#manim.mobject.mobject.Group\" title=\"manim.mobject.mobject.Group\">Group</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph._add_vertex\">\n<span class=\"sig-name descname\"><span class=\"pre\">_add_vertex</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">position=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">label=False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">label_fill_color=ManimColor('#000000')</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_type=&lt;class</span> <span class=\"pre\">'manim.mobject.geometry.arc.Dot'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_config=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_mobject=None</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph._add_vertex\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph._add_vertex\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Add a vertex to the graph.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>vertex</strong> (<em>Hashable</em>) \u2013 A hashable vertex identifier.</p></li>\n<li><p><strong>position</strong> (<em>Point3D</em><em> | </em><em>None</em>) \u2013 The coordinates where the new vertex should be added. If <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the center\nof the graph is used.</p></li>\n<li><p><strong>label</strong> (<em>bool</em>) \u2013 Controls whether or not the vertex is labeled. If <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> (the default),\nthe vertex is not labeled; if <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> it is labeled using its\nnames (as specified in <code class=\"docutils literal notranslate\"><span class=\"pre\">vertex</span></code>) via <a class=\"reference internal\" href=\"../manim.mobject.text.tex_mobject.MathTex/#manim.mobject.text.tex_mobject.MathTex\" title=\"manim.mobject.text.tex_mobject.MathTex\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MathTex</span></code></a>. Alternatively,\nany <a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Mobject</span></code></a> can be passed to be used as the label.</p></li>\n<li><p><strong>label_fill_color</strong> (<em>str</em>) \u2013 Sets the fill color of the default labels generated when <code class=\"docutils literal notranslate\"><span class=\"pre\">labels</span></code>\nis set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. Has no effect for other values of <code class=\"docutils literal notranslate\"><span class=\"pre\">label</span></code>.</p></li>\n<li><p><strong>vertex_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>) \u2013 The mobject class used for displaying vertices in the scene.</p></li>\n<li><p><strong>vertex_config</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 A dictionary containing keyword arguments to be passed to\nthe class specified via <code class=\"docutils literal notranslate\"><span class=\"pre\">vertex_type</span></code>.</p></li>\n<li><p><strong>vertex_mobject</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 The mobject to be used as the vertex. Overrides all other\nvertex customization options.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\">Mobject</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph._empty_networkx_graph\">\n<em class=\"property\"><span class=\"pre\">static</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">_empty_networkx_graph</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph._empty_networkx_graph\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph._empty_networkx_graph\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Return an empty networkx graph for the given graph type.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><em>Graph</em></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph._original__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">_original__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edges</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">labels=False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">label_fill_color=ManimColor('#000000')</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout='spring'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout_scale=2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout_config=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_type=&lt;class</span> <span class=\"pre\">'manim.mobject.geometry.arc.Dot'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_config=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_mobjects=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_type=&lt;class</span> <span class=\"pre\">'manim.mobject.geometry.line.Line'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">partitions=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">root_vertex=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_config=None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph._original__init__\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>vertices</strong> (<em>list</em><em>[</em><em>Hashable</em><em>]</em>)</p></li>\n<li><p><strong>edges</strong> (<em>list</em><em>[</em><em>tuple</em><em>[</em><em>Hashable</em><em>, </em><em>Hashable</em><em>]</em><em>]</em>)</p></li>\n<li><p><strong>labels</strong> (<em>bool</em><em> | </em><em>dict</em>)</p></li>\n<li><p><strong>label_fill_color</strong> (<em>str</em>)</p></li>\n<li><p><strong>layout</strong> (<em>Literal</em><em>[</em><em>'circular'</em><em>, </em><em>'kamada_kawai'</em><em>, </em><em>'partite'</em><em>, </em><em>'planar'</em><em>, </em><em>'random'</em><em>, </em><em>'shell'</em><em>, </em><em>'spectral'</em><em>, </em><em>'spiral'</em><em>, </em><em>'spring'</em><em>, </em><em>'tree'</em><em>] </em><em>| </em><em>dict</em><em>[</em><em>~typing.Hashable</em><em>, </em><em>~manim.typing.Point3D</em><em>] </em><em>| </em><em>~manim.mobject.graph.LayoutFunction</em>)</p></li>\n<li><p><strong>layout_scale</strong> (<em>float</em><em> | </em><em>tuple</em><em>[</em><em>float</em><em>, </em><em>float</em><em>, </em><em>float</em><em>]</em>)</p></li>\n<li><p><strong>layout_config</strong> (<em>dict</em><em> | </em><em>None</em>)</p></li>\n<li><p><strong>vertex_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>)</p></li>\n<li><p><strong>vertex_config</strong> (<em>dict</em><em> | </em><em>None</em>)</p></li>\n<li><p><strong>vertex_mobjects</strong> (<em>dict</em><em> | </em><em>None</em>)</p></li>\n<li><p><strong>edge_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>)</p></li>\n<li><p><strong>partitions</strong> (<em>list</em><em>[</em><em>list</em><em>[</em><em>Hashable</em><em>]</em><em>] </em><em>| </em><em>None</em>)</p></li>\n<li><p><strong>root_vertex</strong> (<em>Hashable</em><em> | </em><em>None</em>)</p></li>\n<li><p><strong>edge_config</strong> (<em>dict</em><em> | </em><em>None</em>)</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>None</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph._populate_edge_dict\">\n<span class=\"sig-name descname\"><span class=\"pre\">_populate_edge_dict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edges</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_type</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph._populate_edge_dict\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph._populate_edge_dict\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Helper method for populating the edges of the graph.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>edges</strong> (<em>list</em><em>[</em><em>tuple</em><em>[</em><em>Hashable</em><em>, </em><em>Hashable</em><em>]</em><em>]</em>)</p></li>\n<li><p><strong>edge_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>)</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph._remove_edge\">\n<span class=\"sig-name descname\"><span class=\"pre\">_remove_edge</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph._remove_edge\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph._remove_edge\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Remove an edge from the graph.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><strong>edge</strong> (<em>tuple</em><em>[</em><em>Hashable</em><em>]</em>) \u2013 The edge (i.e., a tuple of vertex identifiers) to be removed from the graph.</p>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>The removed edge.</p>\n</dd>\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\">Mobject</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph._remove_vertex\">\n<span class=\"sig-name descname\"><span class=\"pre\">_remove_vertex</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph._remove_vertex\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph._remove_vertex\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Remove a vertex (as well as all incident edges) from the graph.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><strong>vertex</strong> \u2013 The identifier of a vertex to be removed.</p>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>A mobject containing all removed objects.</p>\n</dd>\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"../manim.mobject.mobject.Group/#manim.mobject.mobject.Group\" title=\"manim.mobject.mobject.Group\">Group</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph.add_edges\">\n<span class=\"sig-name descname\"><span class=\"pre\">add_edges</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">*edges</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_type=&lt;class</span> <span class=\"pre\">'manim.mobject.geometry.line.Line'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_config=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">**kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph.add_edges\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph.add_edges\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Add new edges to the graph.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>edges</strong> (<em>tuple</em><em>[</em><em>Hashable</em><em>, </em><em>Hashable</em><em>]</em>) \u2013 Edges (as tuples of vertex identifiers) to be added. If a non-existing\nvertex is passed, a new vertex with default settings will be created. Create\nnew vertices yourself beforehand to customize them.</p></li>\n<li><p><strong>edge_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>) \u2013 The mobject class used for displaying edges in the scene.</p></li>\n<li><p><strong>edge_config</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 A dictionary either containing keyword arguments to be passed\nto the class specified via <code class=\"docutils literal notranslate\"><span class=\"pre\">edge_type</span></code>, or a dictionary\nwhose keys are the edge tuples, and whose values are dictionaries\ncontaining keyword arguments to be passed for the construction\nof the corresponding edge.</p></li>\n<li><p><strong>kwargs</strong> \u2013 Any further keyword arguments are passed to <a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.add_vertices\" title=\"manim.mobject.graph.GenericGraph.add_vertices\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add_vertices()</span></code></a>\nwhich is used to create new vertices in the passed edges.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>A group containing all newly added vertices and edges.</p>\n</dd>\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"../manim.mobject.mobject.Group/#manim.mobject.mobject.Group\" title=\"manim.mobject.mobject.Group\">Group</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph.add_vertices\">\n<span class=\"sig-name descname\"><span class=\"pre\">add_vertices</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">*vertices</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">positions=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">labels=False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">label_fill_color=ManimColor('#000000')</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_type=&lt;class</span> <span class=\"pre\">'manim.mobject.geometry.arc.Dot'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_config=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_mobjects=None</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph.add_vertices\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph.add_vertices\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Add a list of vertices to the graph.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>vertices</strong> (<em>Hashable</em>) \u2013 Hashable vertex identifiers.</p></li>\n<li><p><strong>positions</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 A dictionary specifying the coordinates where the new vertices should be added.\nIf <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, all vertices are created at the center of the graph.</p></li>\n<li><p><strong>labels</strong> (<em>bool</em>) \u2013 Controls whether or not the vertex is labeled. If <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> (the default),\nthe vertex is not labeled; if <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> it is labeled using its\nnames (as specified in <code class=\"docutils literal notranslate\"><span class=\"pre\">vertex</span></code>) via <a class=\"reference internal\" href=\"../manim.mobject.text.tex_mobject.MathTex/#manim.mobject.text.tex_mobject.MathTex\" title=\"manim.mobject.text.tex_mobject.MathTex\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MathTex</span></code></a>. Alternatively,\nany <a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Mobject</span></code></a> can be passed to be used as the label.</p></li>\n<li><p><strong>label_fill_color</strong> (<em>str</em>) \u2013 Sets the fill color of the default labels generated when <code class=\"docutils literal notranslate\"><span class=\"pre\">labels</span></code>\nis set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. Has no effect for other values of <code class=\"docutils literal notranslate\"><span class=\"pre\">labels</span></code>.</p></li>\n<li><p><strong>vertex_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>) \u2013 The mobject class used for displaying vertices in the scene.</p></li>\n<li><p><strong>vertex_config</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 A dictionary containing keyword arguments to be passed to\nthe class specified via <code class=\"docutils literal notranslate\"><span class=\"pre\">vertex_type</span></code>.</p></li>\n<li><p><strong>vertex_mobjects</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 A dictionary whose keys are the vertex identifiers, and whose\nvalues are mobjects that should be used as vertices. Overrides\nall other vertex customization options.</p></li>\n<li><p><strong>self</strong> (<a class=\"reference internal\" href=\"../manim.mobject.graph.Graph/#manim.mobject.graph.Graph\" title=\"manim.mobject.graph.Graph\"><em>Graph</em></a>)</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph.change_layout\">\n<span class=\"sig-name descname\"><span class=\"pre\">change_layout</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'spring'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout_scale</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout_config</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">partitions</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">root_vertex</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph.change_layout\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph.change_layout\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Change the layout of this graph.</p>\n<p>See the documentation of <a class=\"reference internal\" href=\"../manim.mobject.graph.Graph/#manim.mobject.graph.Graph\" title=\"manim.mobject.graph.Graph\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Graph</span></code></a> for details about the\nkeyword arguments.</p>\n<p class=\"rubric\">Examples</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>layout</strong> (<em>Literal</em><em>[</em><em>'circular'</em><em>, </em><em>'kamada_kawai'</em><em>, </em><em>'partite'</em><em>, </em><em>'planar'</em><em>, </em><em>'random'</em><em>, </em><em>'shell'</em><em>, </em><em>'spectral'</em><em>, </em><em>'spiral'</em><em>, </em><em>'spring'</em><em>, </em><em>'tree'</em><em>] </em><em>| </em><em>dict</em><em>[</em><em>~typing.Hashable</em><em>, </em><em>~manim.typing.Point3D</em><em>] </em><em>| </em><em>~manim.mobject.graph.LayoutFunction</em>)</p></li>\n<li><p><strong>layout_scale</strong> (<em>float</em><em> | </em><em>tuple</em><em>[</em><em>float</em><em>, </em><em>float</em><em>, </em><em>float</em><em>]</em>)</p></li>\n<li><p><strong>layout_config</strong> (<em>dict</em><em>[</em><em>str</em><em>, </em><em>Any</em><em>] </em><em>| </em><em>None</em>)</p></li>\n<li><p><strong>partitions</strong> (<em>list</em><em>[</em><em>list</em><em>[</em><em>Hashable</em><em>]</em><em>] </em><em>| </em><em>None</em>)</p></li>\n<li><p><strong>root_vertex</strong> (<em>Hashable</em><em> | </em><em>None</em>)</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p><a class=\"reference internal\" href=\"../manim.mobject.graph.Graph/#manim.mobject.graph.Graph\" title=\"manim.mobject.graph.Graph\"><em>Graph</em></a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph.from_networkx\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">from_networkx</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nxgraph</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph.from_networkx\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph.from_networkx\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Build a <a class=\"reference internal\" href=\"../manim.mobject.graph.Graph/#manim.mobject.graph.Graph\" title=\"manim.mobject.graph.Graph\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Graph</span></code></a> or <a class=\"reference internal\" href=\"../manim.mobject.graph.DiGraph/#manim.mobject.graph.DiGraph\" title=\"manim.mobject.graph.DiGraph\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiGraph</span></code></a> from a\ngiven <code class=\"docutils literal notranslate\"><span class=\"pre\">networkx</span></code> graph.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>nxgraph</strong> (<em>Graph</em><em> | </em><em>DiGraph</em>) \u2013 A <code class=\"docutils literal notranslate\"><span class=\"pre\">networkx</span></code> graph or digraph.</p></li>\n<li><p><strong>**kwargs</strong> \u2013 Keywords to be passed to the constructor of <a class=\"reference internal\" href=\"../manim.mobject.graph.Graph/#manim.mobject.graph.Graph\" title=\"manim.mobject.graph.Graph\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Graph</span></code></a>.</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph.remove_edges\">\n<span class=\"sig-name descname\"><span class=\"pre\">remove_edges</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">edges</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph.remove_edges\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph.remove_edges\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Remove several edges from the graph.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><strong>edges</strong> (<em>tuple</em><em>[</em><em>Hashable</em><em>]</em>) \u2013 Edges to be removed from the graph.</p>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>A group containing all removed edges.</p>\n</dd>\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"../manim.mobject.mobject.Group/#manim.mobject.mobject.Group\" title=\"manim.mobject.mobject.Group\">Group</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.GenericGraph.remove_vertices\">\n<span class=\"sig-name descname\"><span class=\"pre\">remove_vertices</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">vertices</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#GenericGraph.remove_vertices\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.GenericGraph.remove_vertices\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Remove several vertices from the graph.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><strong>vertices</strong> \u2013 Vertices to be removed from the graph.</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span> <span class=\"o\">=</span> <span class=\"n\">Graph</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">removed</span> <span class=\"o\">=</span> <span class=\"n\">G</span><span class=\"o\">.</span><span class=\"n\">remove_vertices</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span> <span class=\"n\">removed</span>\n<span class=\"go\">VGroup(Line, Line, Dot, Dot)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">G</span>\n<span class=\"go\">Undirected graph on 1 vertices and 0 edges</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n", "metatags": "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/manim.mobject.graph.Graph", "Graph", "N", "next"], ["reference/manim.mobject.graph.DiGraph", "DiGraph", "P", "previous"]], "sourcename": "reference/manim.mobject.graph.GenericGraph.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">GenericGraph</a><ul>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph._add_edge\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph._add_edge()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph._add_vertex\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph._add_vertex()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph._empty_networkx_graph\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph._empty_networkx_graph()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph._original__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph._original__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph._populate_edge_dict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph._populate_edge_dict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph._remove_edge\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph._remove_edge()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph._remove_vertex\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph._remove_vertex()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.add_edges\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph.add_edges()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.add_vertices\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph.add_vertices()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.change_layout\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph.change_layout()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.from_networkx\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph.from_networkx()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.remove_edges\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph.remove_edges()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.GenericGraph.remove_vertices\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericGraph.remove_vertices()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/manim.mobject.graph.GenericGraph", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "alabaster_version": "1.0.0", "alabaster_version_info": [1, 0, 0], "furo_version": "2024.08.06", "furo_navigation_tree": "", "furo_hide_toc": false, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#202020", "foreground": "#d0d0d0"}}}