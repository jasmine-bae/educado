{"parents": [{"link": "../", "title": "Reference Manual"}, {"link": "../../reference_index/utilities_misc/", "title": "Utilities and other modules"}], "prev": {"link": "../../reference_index/utilities_misc/", "title": "Utilities and other modules"}, "next": {"link": "../manim.cli/", "title": "cli"}, "title": "bezier", "meta": {}, "body": "<section id=\"module-manim.utils.bezier\">\n<span id=\"bezier\"></span><h1>bezier<a class=\"headerlink\" href=\"#module-manim.utils.bezier\" title=\"Link to this heading\">\u00b6</a></h1>\n<p>Utility functions related to B\u00e9zier curves.</p>\n<p class=\"rubric\">Functions</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.bezier\">\n<span class=\"sig-name descname\"><span class=\"pre\">bezier</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">points</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#bezier\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.bezier\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Classic implementation of a bezier curve.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><strong>points</strong> (<em>Sequence</em><em>[</em><em>Point3D</em><em>] </em><em>| </em><em>Point3D_Array</em>) \u2013 points defining the desired bezier curve.</p>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p><ul class=\"simple\">\n<li><p><em>function describing the bezier curve.</em></p></li>\n<li><p><em>You can pass a t value between 0 and 1 to get the corresponding point on the curve.</em></p></li>\n</ul>\n</p>\n</dd>\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><em>Callable</em>[[float], <em>Point3D</em>]</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.diag_to_matrix\">\n<span class=\"sig-name descname\"><span class=\"pre\">diag_to_matrix</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">l_and_u</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">diag</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#diag_to_matrix\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.diag_to_matrix\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Converts array whose rows represent diagonal\nentries of a matrix into the matrix itself.\nSee scipy.linalg.solve_banded</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>l_and_u</strong> (<em>tuple</em><em>[</em><em>int</em><em>, </em><em>int</em><em>]</em>)</p></li>\n<li><p><strong>diag</strong> (<em>ndarray</em><em>[</em><em>tuple</em><em>[</em><em>int</em><em>, </em><em>...</em><em>]</em><em>, </em><em>dtype</em><em>[</em><em>Any</em><em>]</em><em>]</em>)</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p><em>ndarray</em>[tuple[int, \u2026], <em>dtype</em>[<em>Any</em>]]</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.get_quadratic_approximation_of_cubic\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_quadratic_approximation_of_cubic</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">a0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">h0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">h1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">a1</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#get_quadratic_approximation_of_cubic\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.get_quadratic_approximation_of_cubic\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>a0</strong> (<em>Point3D</em>)</p></li>\n<li><p><strong>h0</strong> (<em>Point3D</em>)</p></li>\n<li><p><strong>h1</strong> (<em>Point3D</em>)</p></li>\n<li><p><strong>a1</strong> (<em>Point3D</em>)</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p><em>BezierPoints</em></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.get_smooth_cubic_bezier_handle_points\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_smooth_cubic_bezier_handle_points</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">points</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#get_smooth_cubic_bezier_handle_points\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.get_smooth_cubic_bezier_handle_points\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><strong>points</strong> (<em>Point3D_Array</em>)</p>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>tuple[<em>BezierPoints</em>, <em>BezierPoints</em>]</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.get_smooth_handle_points\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_smooth_handle_points</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">points</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#get_smooth_handle_points\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.get_smooth_handle_points\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Given some anchors (points), compute handles so the resulting bezier curve is smooth.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><strong>points</strong> (<em>BezierPoints</em>) \u2013 Anchors.</p>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>Computed handles.</p>\n</dd>\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><em>Tuple</em>[np.ndarray, np.ndarray]</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.integer_interpolate\">\n<span class=\"sig-name descname\"><span class=\"pre\">integer_interpolate</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">end</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">alpha</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#integer_interpolate\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.integer_interpolate\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>This is a variant of interpolate that returns an integer and the residual</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>start</strong> (<em>float</em>) \u2013 The start of the range</p></li>\n<li><p><strong>end</strong> (<em>float</em>) \u2013 The end of the range</p></li>\n<li><p><strong>alpha</strong> (<em>float</em>) \u2013 a float between 0 and 1.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>This returns an integer between start and end (inclusive) representing\nappropriate interpolation between them, along with a\n\u201cresidue\u201d representing a new proportion between the\nreturned integer and the next one of the\nlist.</p>\n</dd>\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p>tuple[int, float]</p>\n</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">integer</span><span class=\"p\">,</span> <span class=\"n\">residue</span> <span class=\"o\">=</span> <span class=\"n\">integer_interpolate</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.46</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">allclose</span><span class=\"p\">((</span><span class=\"n\">integer</span><span class=\"p\">,</span> <span class=\"n\">residue</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">))</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.interpolate\">\n<span class=\"sig-name descname\"><span class=\"pre\">interpolate</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">end</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">alpha</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">float</span></span></span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#interpolate\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.interpolate\" title=\"Link to this definition\">\u00b6</a></dt>\n<dt class=\"sig sig-object py\">\n<span class=\"sig-name descname\"><span class=\"pre\">interpolate</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Point3D</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">end</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Point3D</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">alpha</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">Point3D</span></span></span></dt>\n<dd></dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.inverse_interpolate\">\n<span class=\"sig-name descname\"><span class=\"pre\">inverse_interpolate</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">end</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">float</span></span></span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#inverse_interpolate\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.inverse_interpolate\" title=\"Link to this definition\">\u00b6</a></dt>\n<dt class=\"sig sig-object py\">\n<span class=\"sig-name descname\"><span class=\"pre\">inverse_interpolate</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">end</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Point3D</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">Point3D</span></span></span></dt>\n<dt class=\"sig sig-object py\">\n<span class=\"sig-name descname\"><span class=\"pre\">inverse_interpolate</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Point3D</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">end</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Point3D</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Point3D</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">Point3D</span></span></span></dt>\n<dd><p>Perform inverse interpolation to determine the alpha\nvalues that would produce the specified <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>\ngiven the <code class=\"docutils literal notranslate\"><span class=\"pre\">start</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">end</span></code> values or points.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>start</strong> \u2013 The start value or point of the interpolation.</p></li>\n<li><p><strong>end</strong> \u2013 The end value or point of the interpolation.</p></li>\n<li><p><strong>value</strong> \u2013 The value or point for which the alpha value\nshould be determined.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p><ul class=\"simple\">\n<li><p><em>The alpha values producing the given input</em></p></li>\n<li><p>when interpolating between <code class=\"docutils literal notranslate\"><span class=\"pre\">start</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">end</span></code>.</p></li>\n</ul>\n</p>\n</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">inverse_interpolate</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">0.5</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">inverse_interpolate</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"go\">array([0.5, 0.5, 0.4])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.is_closed\">\n<span class=\"sig-name descname\"><span class=\"pre\">is_closed</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">points</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#is_closed\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.is_closed\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><strong>points</strong> (<em>Point3D_Array</em>)</p>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>bool</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.match_interpolate\">\n<span class=\"sig-name descname\"><span class=\"pre\">match_interpolate</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">new_start</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">new_end</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">old_start</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">old_end</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">old_value</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">float</span></span></span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#match_interpolate\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.match_interpolate\" title=\"Link to this definition\">\u00b6</a></dt>\n<dt class=\"sig sig-object py\">\n<span class=\"sig-name descname\"><span class=\"pre\">match_interpolate</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">new_start</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">new_end</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">old_start</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">old_end</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">old_value</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Point3D</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">Point3D</span></span></span></dt>\n<dd><p>Interpolate a value from an old range to a new range.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>new_start</strong> \u2013 The start of the new range.</p></li>\n<li><p><strong>new_end</strong> \u2013 The end of the new range.</p></li>\n<li><p><strong>old_start</strong> \u2013 The start of the old range.</p></li>\n<li><p><strong>old_end</strong> \u2013 The end of the old range.</p></li>\n<li><p><strong>old_value</strong> \u2013 The value within the old range whose corresponding\nvalue in the new range (with the same alpha value)\nis desired.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>The interpolated value within the new range.</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">match_interpolate</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"go\">50.0</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.mid\">\n<span class=\"sig-name descname\"><span class=\"pre\">mid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">end</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">float</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">float</span></span></span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#mid\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.mid\" title=\"Link to this definition\">\u00b6</a></dt>\n<dt class=\"sig sig-object py\">\n<span class=\"sig-name descname\"><span class=\"pre\">mid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">start</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Point3D</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">end</span></span><span class=\"p\"><span class=\"pre\">:</span></span><span class=\"w\"> </span><span class=\"n\"><span class=\"pre\">Point3D</span></span></em><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">Point3D</span></span></span></dt>\n<dd><p>Returns the midpoint between two values.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>start</strong> \u2013 The first value</p></li>\n<li><p><strong>end</strong> \u2013 The second value</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>The midpoint between the two values</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.partial_bezier_points\">\n<span class=\"sig-name descname\"><span class=\"pre\">partial_bezier_points</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">points</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">a</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">b</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#partial_bezier_points\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.partial_bezier_points\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Given an array of points which define bezier curve, and two numbers 0&lt;=a&lt;b&lt;=1, return an array of the same size,\nwhich describes the portion of the original bezier curve on the interval [a, b].</p>\n<p>This algorithm is pretty nifty, and pretty dense.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>points</strong> (<em>BezierPoints</em>) \u2013 set of points defining the bezier curve.</p></li>\n<li><p><strong>a</strong> (<em>float</em>) \u2013 lower bound of the desired partial bezier curve.</p></li>\n<li><p><strong>b</strong> (<em>float</em>) \u2013 upper bound of the desired partial bezier curve.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>Set of points defining the partial bezier curve.</p>\n</dd>\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p>np.ndarray</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.partial_quadratic_bezier_points\">\n<span class=\"sig-name descname\"><span class=\"pre\">partial_quadratic_bezier_points</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">points</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">a</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">b</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#partial_quadratic_bezier_points\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.partial_quadratic_bezier_points\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>points</strong> (<em>QuadraticBezierPoints</em>)</p></li>\n<li><p><strong>a</strong> (<em>float</em>)</p></li>\n<li><p><strong>b</strong> (<em>float</em>)</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p><em>QuadraticBezierPoints</em></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.point_lies_on_bezier\">\n<span class=\"sig-name descname\"><span class=\"pre\">point_lies_on_bezier</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">point</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">control_points</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">round_to</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-06</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#point_lies_on_bezier\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.point_lies_on_bezier\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Checks if a given point lies on the bezier curves with the given control points.</p>\n<p>This is done by solving the bezier polynomial with the point as the constant term; if\nany real roots exist, the point lies on the bezier curve.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>point</strong> (<em>Point3D</em>) \u2013 The Cartesian Coordinates of the point to check.</p></li>\n<li><p><strong>control_points</strong> (<em>BezierPoints</em>) \u2013 The Cartesian Coordinates of the ordered control\npoints of the bezier curve on which the point may\nor may not lie.</p></li>\n<li><p><strong>round_to</strong> (<em>float</em>) \u2013 A float whose number of decimal places all values\nsuch as coordinates of points will be rounded.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>Whether the point lies on the curve.</p>\n</dd>\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p>bool</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.proportions_along_bezier_curve_for_point\">\n<span class=\"sig-name descname\"><span class=\"pre\">proportions_along_bezier_curve_for_point</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">point</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">control_points</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">round_to</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1e-06</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#proportions_along_bezier_curve_for_point\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.proportions_along_bezier_curve_for_point\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Obtains the proportion along the bezier curve corresponding to a given point\ngiven the bezier curve\u2019s control points.</p>\n<p>The bezier polynomial is constructed using the coordinates of the given point\nas well as the bezier curve\u2019s control points. On solving the polynomial for each dimension,\nif there are roots common to every dimension, those roots give the proportion along the\ncurve the point is at. If there are no real roots, the point does not lie on the curve.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>point</strong> (<em>Point3D</em>) \u2013 The Cartesian Coordinates of the point whose parameter\nshould be obtained.</p></li>\n<li><p><strong>control_points</strong> (<em>BezierPoints</em>) \u2013 The Cartesian Coordinates of the ordered control\npoints of the bezier curve on which the point may\nor may not lie.</p></li>\n<li><p><strong>round_to</strong> (<em>float</em>) \u2013 A float whose number of decimal places all values\nsuch as coordinates of points will be rounded.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>List containing possible parameters (the proportions along the bezier curve)\nfor the given point on the given bezier curve.\nThis usually only contains one or zero elements, but if the\npoint is, say, at the beginning/end of a closed loop, may return\na list with more than 1 value, corresponding to the beginning and\nend etc. of the loop.</p>\n</dd>\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p>np.ndarray[float]</p>\n</dd>\n<dt class=\"field-even\">Raises<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p><strong>ValueError</strong> \u2013 When <code class=\"docutils literal notranslate\"><span class=\"pre\">point</span></code> and the control points have different shapes.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.quadratic_bezier_remap\">\n<span class=\"sig-name descname\"><span class=\"pre\">quadratic_bezier_remap</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">triplets</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">new_number_of_curves</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#quadratic_bezier_remap\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.quadratic_bezier_remap\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Remaps the number of curves to a higher amount by splitting bezier curves</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>triplets</strong> (<em>QuadraticBezierPoints_Array</em>) \u2013 The triplets of the quadratic bezier curves to be remapped shape(n, 3, 3)</p></li>\n<li><p><strong>new_number_of_curves</strong> (<em>int</em>) \u2013 The number of curves that the output will contain. This needs to be higher than the current number.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>The new triplets for the quadratic bezier curves.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.split_quadratic_bezier\">\n<span class=\"sig-name descname\"><span class=\"pre\">split_quadratic_bezier</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">points</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">t</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#split_quadratic_bezier\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.split_quadratic_bezier\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Split a quadratic B\u00e9zier curve at argument <code class=\"docutils literal notranslate\"><span class=\"pre\">t</span></code> into two quadratic curves.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>points</strong> (<em>QuadraticBezierPoints</em>) \u2013 The control points of the bezier curve\nhas shape <code class=\"docutils literal notranslate\"><span class=\"pre\">[a1,</span> <span class=\"pre\">h1,</span> <span class=\"pre\">b1]</span></code></p></li>\n<li><p><strong>t</strong> (<em>float</em>) \u2013 The <code class=\"docutils literal notranslate\"><span class=\"pre\">t</span></code>-value at which to split the B\u00e9zier curve</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p><ul class=\"simple\">\n<li><p><em>The two B\u00e9zier curves as a list of tuples,</em></p></li>\n<li><p>has the shape <code class=\"docutils literal notranslate\"><span class=\"pre\">[a1,</span> <span class=\"pre\">h1,</span> <span class=\"pre\">b1],</span> <span class=\"pre\">[a2,</span> <span class=\"pre\">h2,</span> <span class=\"pre\">b2]</span></code></p></li>\n</ul>\n</p>\n</dd>\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><em>BezierPoints</em></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"manim.utils.bezier.subdivide_quadratic_bezier\">\n<span class=\"sig-name descname\"><span class=\"pre\">subdivide_quadratic_bezier</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">points</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">n</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/utils/bezier/#subdivide_quadratic_bezier\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.utils.bezier.subdivide_quadratic_bezier\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Subdivide a quadratic B\u00e9zier curve into <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code> subcurves which have the same shape.</p>\n<p>The points at which the curve is split are located at the\narguments <span class=\"math notranslate nohighlight\">\\(t = i/n\\)</span> for <span class=\"math notranslate nohighlight\">\\(i = 1, ..., n-1\\)</span>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>points</strong> (<em>QuadraticBezierPoints</em>) \u2013 The control points of the B\u00e9zier curve in form <code class=\"docutils literal notranslate\"><span class=\"pre\">[a1,</span> <span class=\"pre\">h1,</span> <span class=\"pre\">b1]</span></code></p></li>\n<li><p><strong>n</strong> (<em>int</em>) \u2013 The number of curves to subdivide the B\u00e9zier curve into</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>The new points for the B\u00e9zier curve in the form <code class=\"docutils literal notranslate\"><span class=\"pre\">[a1,</span> <span class=\"pre\">h1,</span> <span class=\"pre\">b1,</span> <span class=\"pre\">a2,</span> <span class=\"pre\">h2,</span> <span class=\"pre\">b2,</span> <span class=\"pre\">...]</span></code></p>\n</dd>\n</dl>\n<img alt=\"../../_images/bezier_subdivision_example.png\" src=\"../../_images/bezier_subdivision_example.png\" />\n</dd></dl>\n\n</section>\n", "metatags": "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/manim.cli", "cli", "N", "next"], ["reference_index/utilities_misc", "Utilities and other modules", "P", "previous"]], "sourcename": "reference/manim.utils.bezier.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">bezier</a><ul>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.bezier\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bezier()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.diag_to_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">diag_to_matrix()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.get_quadratic_approximation_of_cubic\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_quadratic_approximation_of_cubic()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.get_smooth_cubic_bezier_handle_points\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_smooth_cubic_bezier_handle_points()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.get_smooth_handle_points\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_smooth_handle_points()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.integer_interpolate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">integer_interpolate()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.interpolate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">interpolate()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.inverse_interpolate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">inverse_interpolate()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.is_closed\"><code class=\"docutils literal notranslate\"><span class=\"pre\">is_closed()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.match_interpolate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">match_interpolate()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.mid\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mid()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.partial_bezier_points\"><code class=\"docutils literal notranslate\"><span class=\"pre\">partial_bezier_points()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.partial_quadratic_bezier_points\"><code class=\"docutils literal notranslate\"><span class=\"pre\">partial_quadratic_bezier_points()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.point_lies_on_bezier\"><code class=\"docutils literal notranslate\"><span class=\"pre\">point_lies_on_bezier()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.proportions_along_bezier_curve_for_point\"><code class=\"docutils literal notranslate\"><span class=\"pre\">proportions_along_bezier_curve_for_point()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.quadratic_bezier_remap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">quadratic_bezier_remap()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.split_quadratic_bezier\"><code class=\"docutils literal notranslate\"><span class=\"pre\">split_quadratic_bezier()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.utils.bezier.subdivide_quadratic_bezier\"><code class=\"docutils literal notranslate\"><span class=\"pre\">subdivide_quadratic_bezier()</span></code></a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/manim.utils.bezier", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "alabaster_version": "1.0.0", "alabaster_version_info": [1, 0, 0], "furo_version": "2024.08.06", "furo_navigation_tree": "", "furo_hide_toc": false, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#202020", "foreground": "#d0d0d0"}}}