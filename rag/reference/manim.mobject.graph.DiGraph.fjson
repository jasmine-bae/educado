{"parents": [{"link": "../", "title": "Reference Manual"}, {"link": "../../reference_index/mobjects/", "title": "Mobjects"}, {"link": "../manim.mobject.graph/", "title": "graph"}], "prev": {"link": "../manim.mobject.graph/", "title": "graph"}, "next": {"link": "../manim.mobject.graph.GenericGraph/", "title": "GenericGraph"}, "title": "DiGraph", "meta": {}, "body": "<section id=\"digraph\">\n<h1>DiGraph<a class=\"headerlink\" href=\"#digraph\" title=\"Link to this heading\">\u00b6</a></h1>\n<p>Qualified name: <code class=\"docutils literal notranslate\"><span class=\"pre\">manim.mobject.graph.DiGraph</span></code></p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.DiGraph\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">DiGraph</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edges</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">labels=False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">label_fill_color=ManimColor('#000000')</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout='spring'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout_scale=2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout_config=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_type=&lt;class</span> <span class=\"pre\">'manim.mobject.geometry.arc.Dot'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_config=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_mobjects=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_type=&lt;class</span> <span class=\"pre\">'manim.mobject.geometry.line.Line'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">partitions=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">root_vertex=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_config=None</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#DiGraph\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.DiGraph\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../manim.mobject.graph.GenericGraph/#manim.mobject.graph.GenericGraph\" title=\"manim.mobject.graph.GenericGraph\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericGraph</span></code></a></p>\n<p>A directed graph.</p>\n<div class=\"admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>In contrast to undirected graphs, the order in which vertices in a given\nedge are specified is relevant here.</p>\n</div>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<p><a class=\"reference internal\" href=\"../manim.mobject.graph.GenericGraph/#manim.mobject.graph.GenericGraph\" title=\"manim.mobject.graph.GenericGraph\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericGraph</span></code></a></p>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>vertices</strong> (<em>list</em><em>[</em><em>Hashable</em><em>]</em>) \u2013 A list of vertices. Must be hashable elements.</p></li>\n<li><p><strong>edges</strong> (<em>list</em><em>[</em><em>tuple</em><em>[</em><em>Hashable</em><em>, </em><em>Hashable</em><em>]</em><em>]</em>) \u2013 A list of edges, specified as tuples <code class=\"docutils literal notranslate\"><span class=\"pre\">(u,</span> <span class=\"pre\">v)</span></code> where both <code class=\"docutils literal notranslate\"><span class=\"pre\">u</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">v</span></code> are vertices. The edge is directed from <code class=\"docutils literal notranslate\"><span class=\"pre\">u</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">v</span></code>.</p></li>\n<li><p><strong>labels</strong> (<em>bool</em><em> | </em><em>dict</em>) \u2013 Controls whether or not vertices are labeled. If <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> (the default),\nthe vertices are not labeled; if <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> they are labeled using their\nnames (as specified in <code class=\"docutils literal notranslate\"><span class=\"pre\">vertices</span></code>) via <a class=\"reference internal\" href=\"../manim.mobject.text.tex_mobject.MathTex/#manim.mobject.text.tex_mobject.MathTex\" title=\"manim.mobject.text.tex_mobject.MathTex\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MathTex</span></code></a>. Alternatively,\ncustom labels can be specified by passing a dictionary whose keys are\nthe vertices, and whose values are the corresponding vertex labels\n(rendered via, e.g., <a class=\"reference internal\" href=\"../manim.mobject.text.text_mobject.Text/#manim.mobject.text.text_mobject.Text\" title=\"manim.mobject.text.text_mobject.Text\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Text</span></code></a> or <a class=\"reference internal\" href=\"../manim.mobject.text.tex_mobject.Tex/#manim.mobject.text.tex_mobject.Tex\" title=\"manim.mobject.text.tex_mobject.Tex\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tex</span></code></a>).</p></li>\n<li><p><strong>label_fill_color</strong> (<em>str</em>) \u2013 Sets the fill color of the default labels generated when <code class=\"docutils literal notranslate\"><span class=\"pre\">labels</span></code>\nis set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. Has no effect for other values of <code class=\"docutils literal notranslate\"><span class=\"pre\">labels</span></code>.</p></li>\n<li><p><strong>layout</strong> (<em>LayoutName</em><em> | </em><em>dict</em><em>[</em><em>Hashable</em><em>, </em><em>Point3D</em><em>] </em><em>| </em><a class=\"reference internal\" href=\"../manim.mobject.graph.LayoutFunction/#manim.mobject.graph.LayoutFunction\" title=\"manim.mobject.graph.LayoutFunction\"><em>LayoutFunction</em></a>) \u2013 Either one of <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;spring&quot;</span></code> (the default), <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;circular&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;kamada_kawai&quot;</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;planar&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;random&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;shell&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;spectral&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;spiral&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;tree&quot;</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;partite&quot;</span></code>\nfor automatic vertex positioning using <code class=\"docutils literal notranslate\"><span class=\"pre\">networkx</span></code>\n(see <a class=\"reference external\" href=\"https://networkx.org/documentation/stable/reference/drawing.html#module-networkx.drawing.layout\">their documentation</a>\nfor more details), or a dictionary specifying a coordinate (value)\nfor each vertex (key) for manual positioning.</p></li>\n<li><p><strong>layout_config</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 Only for automatically generated layouts. A dictionary whose entries\nare passed as keyword arguments to the automatic layout algorithm\nspecified via <code class=\"docutils literal notranslate\"><span class=\"pre\">layout</span></code> of <code class=\"docutils literal notranslate\"><span class=\"pre\">networkx</span></code>.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">tree</span></code> layout also accepts a special parameter <code class=\"docutils literal notranslate\"><span class=\"pre\">vertex_spacing</span></code>\npassed as a keyword argument inside the <code class=\"docutils literal notranslate\"><span class=\"pre\">layout_config</span></code> dictionary.\nPassing a tuple <code class=\"docutils literal notranslate\"><span class=\"pre\">(space_x,</span> <span class=\"pre\">space_y)</span></code> as this argument overrides\nthe value of <code class=\"docutils literal notranslate\"><span class=\"pre\">layout_scale</span></code> and ensures that vertices are arranged\nin a way such that the centers of siblings in the same layer are\nat least <code class=\"docutils literal notranslate\"><span class=\"pre\">space_x</span></code> units apart horizontally, and neighboring layers\nare spaced <code class=\"docutils literal notranslate\"><span class=\"pre\">space_y</span></code> units vertically.</p></li>\n<li><p><strong>layout_scale</strong> (<em>float</em><em> | </em><em>tuple</em><em>[</em><em>float</em><em>, </em><em>float</em><em>, </em><em>float</em><em>]</em>) \u2013 The scale of automatically generated layouts: the vertices will\nbe arranged such that the coordinates are located within the\ninterval <code class=\"docutils literal notranslate\"><span class=\"pre\">[-scale,</span> <span class=\"pre\">scale]</span></code>. Some layouts accept a tuple <code class=\"docutils literal notranslate\"><span class=\"pre\">(scale_x,</span> <span class=\"pre\">scale_y)</span></code>\ncausing the first coordinate to be in the interval <code class=\"docutils literal notranslate\"><span class=\"pre\">[-scale_x,</span> <span class=\"pre\">scale_x]</span></code>,\nand the second in <code class=\"docutils literal notranslate\"><span class=\"pre\">[-scale_y,</span> <span class=\"pre\">scale_y]</span></code>. Default: 2.</p></li>\n<li><p><strong>vertex_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>) \u2013 The mobject class used for displaying vertices in the scene.</p></li>\n<li><p><strong>vertex_config</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 Either a dictionary containing keyword arguments to be passed to\nthe class specified via <code class=\"docutils literal notranslate\"><span class=\"pre\">vertex_type</span></code>, or a dictionary whose keys\nare the vertices, and whose values are dictionaries containing keyword\narguments for the mobject related to the corresponding vertex.</p></li>\n<li><p><strong>vertex_mobjects</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 A dictionary whose keys are the vertices, and whose values are\nmobjects to be used as vertices. Passing vertices here overrides\nall other configuration options for a vertex.</p></li>\n<li><p><strong>edge_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>) \u2013 The mobject class used for displaying edges in the scene.</p></li>\n<li><p><strong>edge_config</strong> (<em>dict</em><em> | </em><em>None</em>) \u2013 Either a dictionary containing keyword arguments to be passed\nto the class specified via <code class=\"docutils literal notranslate\"><span class=\"pre\">edge_type</span></code>, or a dictionary whose\nkeys are the edges, and whose values are dictionaries containing\nkeyword arguments for the mobject related to the corresponding edge.\nYou can further customize the tip by adding a <code class=\"docutils literal notranslate\"><span class=\"pre\">tip_config</span></code> dictionary\nfor global styling, or by adding the dict to a specific <code class=\"docutils literal notranslate\"><span class=\"pre\">edge_config</span></code>.</p></li>\n<li><p><strong>partitions</strong> (<em>list</em><em>[</em><em>list</em><em>[</em><em>Hashable</em><em>]</em><em>] </em><em>| </em><em>None</em>)</p></li>\n<li><p><strong>root_vertex</strong> (<em>Hashable</em><em> | </em><em>None</em>)</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>You can customize the edges and arrow tips globally or locally.</p>\n<p>Since this implementation respects the labels boundary you can also use\nit for an undirected moving graph with labels.</p>\n<p class=\"rubric\">Methods</p>\n<div class=\"table-wrapper autosummary longtable docutils container\">\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#manim.mobject.graph.DiGraph.update_edges\" title=\"manim.mobject.graph.DiGraph.update_edges\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update_edges</span></code></a></p></td>\n<td><p>Updates the edges to stick at their corresponding vertices.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p class=\"rubric\">Attributes</p>\n<div class=\"table-wrapper autosummary longtable docutils container\">\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">animate</span></code></p></td>\n<td><p>Used to animate the application of any method of <code class=\"code docutils literal notranslate\"><span class=\"pre\">self</span></code>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">animation_overrides</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">color</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">depth</span></code></p></td>\n<td><p>The depth of the mobject.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fill_color</span></code></p></td>\n<td><p>If there are multiple colors (for gradient) this returns the first one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">height</span></code></p></td>\n<td><p>The height of the mobject.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">n_points_per_curve</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sheen_factor</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">stroke_color</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">width</span></code></p></td>\n<td><p>The width of the mobject.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.DiGraph._empty_networkx_graph\">\n<em class=\"property\"><span class=\"pre\">static</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">_empty_networkx_graph</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#DiGraph._empty_networkx_graph\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.DiGraph._empty_networkx_graph\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Return an empty networkx graph for the given graph type.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><em>DiGraph</em></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.DiGraph._original__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">_original__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertices</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edges</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">labels=False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">label_fill_color=ManimColor('#000000')</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout='spring'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout_scale=2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">layout_config=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_type=&lt;class</span> <span class=\"pre\">'manim.mobject.geometry.arc.Dot'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_config=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_mobjects=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_type=&lt;class</span> <span class=\"pre\">'manim.mobject.geometry.line.Line'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">partitions=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">root_vertex=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_config=None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#manim.mobject.graph.DiGraph._original__init__\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>vertices</strong> (<em>list</em><em>[</em><em>Hashable</em><em>]</em>)</p></li>\n<li><p><strong>edges</strong> (<em>list</em><em>[</em><em>tuple</em><em>[</em><em>Hashable</em><em>, </em><em>Hashable</em><em>]</em><em>]</em>)</p></li>\n<li><p><strong>labels</strong> (<em>bool</em><em> | </em><em>dict</em>)</p></li>\n<li><p><strong>label_fill_color</strong> (<em>str</em>)</p></li>\n<li><p><strong>layout</strong> (<em>Literal</em><em>[</em><em>'circular'</em><em>, </em><em>'kamada_kawai'</em><em>, </em><em>'partite'</em><em>, </em><em>'planar'</em><em>, </em><em>'random'</em><em>, </em><em>'shell'</em><em>, </em><em>'spectral'</em><em>, </em><em>'spiral'</em><em>, </em><em>'spring'</em><em>, </em><em>'tree'</em><em>] </em><em>| </em><em>dict</em><em>[</em><em>~typing.Hashable</em><em>, </em><em>~manim.typing.Point3D</em><em>] </em><em>| </em><em>~manim.mobject.graph.LayoutFunction</em>)</p></li>\n<li><p><strong>layout_scale</strong> (<em>float</em><em> | </em><em>tuple</em><em>[</em><em>float</em><em>, </em><em>float</em><em>, </em><em>float</em><em>]</em>)</p></li>\n<li><p><strong>layout_config</strong> (<em>dict</em><em> | </em><em>None</em>)</p></li>\n<li><p><strong>vertex_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>)</p></li>\n<li><p><strong>vertex_config</strong> (<em>dict</em><em> | </em><em>None</em>)</p></li>\n<li><p><strong>vertex_mobjects</strong> (<em>dict</em><em> | </em><em>None</em>)</p></li>\n<li><p><strong>edge_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>)</p></li>\n<li><p><strong>partitions</strong> (<em>list</em><em>[</em><em>list</em><em>[</em><em>Hashable</em><em>]</em><em>] </em><em>| </em><em>None</em>)</p></li>\n<li><p><strong>root_vertex</strong> (<em>Hashable</em><em> | </em><em>None</em>)</p></li>\n<li><p><strong>edge_config</strong> (<em>dict</em><em> | </em><em>None</em>)</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>None</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.DiGraph._populate_edge_dict\">\n<span class=\"sig-name descname\"><span class=\"pre\">_populate_edge_dict</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edges</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">edge_type</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#DiGraph._populate_edge_dict\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.DiGraph._populate_edge_dict\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Helper method for populating the edges of the graph.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>edges</strong> (<em>list</em><em>[</em><em>tuple</em><em>[</em><em>Hashable</em><em>, </em><em>Hashable</em><em>]</em><em>]</em>)</p></li>\n<li><p><strong>edge_type</strong> (<em>type</em><em>[</em><a class=\"reference internal\" href=\"../manim.mobject.mobject.Mobject/#manim.mobject.mobject.Mobject\" title=\"manim.mobject.mobject.Mobject\"><em>Mobject</em></a><em>]</em>)</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.graph.DiGraph.update_edges\">\n<span class=\"sig-name descname\"><span class=\"pre\">update_edges</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">graph</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/graph/#DiGraph.update_edges\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.graph.DiGraph.update_edges\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Updates the edges to stick at their corresponding vertices.</p>\n<p>Arrow tips need to be repositioned since otherwise they can be\ndeformed.</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n", "metatags": "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/manim.mobject.graph.GenericGraph", "GenericGraph", "N", "next"], ["reference/manim.mobject.graph", "graph", "P", "previous"]], "sourcename": "reference/manim.mobject.graph.DiGraph.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">DiGraph</a><ul>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.DiGraph\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiGraph</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.DiGraph._empty_networkx_graph\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiGraph._empty_networkx_graph()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.DiGraph._original__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiGraph._original__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.DiGraph._populate_edge_dict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiGraph._populate_edge_dict()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.graph.DiGraph.update_edges\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DiGraph.update_edges()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/manim.mobject.graph.DiGraph", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "alabaster_version": "1.0.0", "alabaster_version_info": [1, 0, 0], "furo_version": "2024.08.06", "furo_navigation_tree": "", "furo_hide_toc": false, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#202020", "foreground": "#d0d0d0"}}}