{"parents": [{"link": "../", "title": "Reference Manual"}, {"link": "../../reference_index/mobjects/", "title": "Mobjects"}, {"link": "../manim.mobject.three_d/", "title": "three_d"}, {"link": "../manim.mobject.three_d.polyhedra/", "title": "polyhedra"}], "prev": {"link": "../manim.mobject.three_d.polyhedra.Octahedron/", "title": "Octahedron"}, "next": {"link": "../manim.mobject.three_d.polyhedra.Tetrahedron/", "title": "Tetrahedron"}, "title": "Polyhedron", "meta": {}, "body": "<section id=\"polyhedron\">\n<h1>Polyhedron<a class=\"headerlink\" href=\"#polyhedron\" title=\"Link to this heading\">\u00b6</a></h1>\n<p>Qualified name: <code class=\"docutils literal notranslate\"><span class=\"pre\">manim.mobject.three\\_d.polyhedra.Polyhedron</span></code></p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.three_d.polyhedra.Polyhedron\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">Polyhedron</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_coords</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">faces_list</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">faces_config</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">{}</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">graph_config</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">{}</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/three_d/polyhedra/#Polyhedron\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../manim.mobject.types.vectorized_mobject.VGroup/#manim.mobject.types.vectorized_mobject.VGroup\" title=\"manim.mobject.types.vectorized_mobject.VGroup\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">VGroup</span></code></a></p>\n<p>An abstract polyhedra class.</p>\n<p>In this implementation, polyhedra are defined with a list of vertex coordinates in space, and a list\nof faces. This implementation mirrors that of a standard polyhedral data format (OFF, object file format).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>vertex_coords</strong> (<em>list</em><em>[</em><em>list</em><em>[</em><em>float</em><em>] </em><em>| </em><em>np.ndarray</em><em>]</em>) \u2013 A list of coordinates of the corresponding vertices in the polyhedron. Each coordinate will correspond to\na vertex. The vertices are indexed with the usual indexing of Python.</p></li>\n<li><p><strong>faces_list</strong> (<em>list</em><em>[</em><em>list</em><em>[</em><em>int</em><em>]</em><em>]</em>) \u2013 A list of faces. Each face is a sublist containing the indices of the vertices that form the corners of that face.</p></li>\n<li><p><strong>faces_config</strong> (<em>dict</em><em>[</em><em>str</em><em>, </em><em>str</em><em> | </em><em>int</em><em> | </em><em>float</em><em> | </em><em>bool</em><em>]</em>) \u2013 Configuration for the polygons representing the faces of the polyhedron.</p></li>\n<li><p><strong>graph_config</strong> (<em>dict</em><em>[</em><em>str</em><em>, </em><em>str</em><em> | </em><em>int</em><em> | </em><em>float</em><em> | </em><em>bool</em><em>]</em>) \u2013 Configuration for the graph containing the vertices and edges of the polyhedron.</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>To understand how to create a custom polyhedra, let\u2019s use the example of a rather simple one - a square pyramid.</p>\n<p>In defining the polyhedron above, we first defined the coordinates of the vertices.\nThese are the corners of the square base, given as the first four coordinates in the vertex list,\nand the apex, the last coordinate in the list.</p>\n<p>Next, we define the faces of the polyhedron. The triangular surfaces of the pyramid are polygons\nwith two adjacent vertices in the base and the vertex at the apex as corners. We thus define these\nsurfaces in the first four elements of our face list. The last element defines the base of the pyramid.</p>\n<p>The graph and faces of polyhedra can also be accessed and modified directly, after instantiation.\nThey are stored in the <cite>graph</cite> and <cite>faces</cite> attributes respectively.</p>\n<p class=\"rubric\">Methods</p>\n<div class=\"table-wrapper autosummary longtable docutils container\">\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron.create_faces\" title=\"manim.mobject.three_d.polyhedra.Polyhedron.create_faces\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_faces</span></code></a></p></td>\n<td><p>Creates VGroup of faces from a list of face coordinates.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron.extract_face_coords\" title=\"manim.mobject.three_d.polyhedra.Polyhedron.extract_face_coords\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extract_face_coords</span></code></a></p></td>\n<td><p>Extracts the coordinates of the vertices in the graph.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron.get_edges\" title=\"manim.mobject.three_d.polyhedra.Polyhedron.get_edges\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_edges</span></code></a></p></td>\n<td><p>Creates list of cyclic pairwise tuples.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update_faces</span></code></p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p class=\"rubric\">Attributes</p>\n<div class=\"table-wrapper autosummary longtable docutils container\">\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">animate</span></code></p></td>\n<td><p>Used to animate the application of any method of <code class=\"code docutils literal notranslate\"><span class=\"pre\">self</span></code>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">animation_overrides</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">color</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">depth</span></code></p></td>\n<td><p>The depth of the mobject.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fill_color</span></code></p></td>\n<td><p>If there are multiple colors (for gradient) this returns the first one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">height</span></code></p></td>\n<td><p>The height of the mobject.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">n_points_per_curve</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sheen_factor</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">stroke_color</span></code></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">width</span></code></p></td>\n<td><p>The width of the mobject.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.three_d.polyhedra.Polyhedron._original__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">_original__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vertex_coords</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">faces_list</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">faces_config</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">{}</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">graph_config</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">{}</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron._original__init__\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>vertex_coords</strong> (<em>list</em><em>[</em><em>list</em><em>[</em><em>float</em><em>] </em><em>| </em><em>ndarray</em><em>]</em>)</p></li>\n<li><p><strong>faces_list</strong> (<em>list</em><em>[</em><em>list</em><em>[</em><em>int</em><em>]</em><em>]</em>)</p></li>\n<li><p><strong>faces_config</strong> (<em>dict</em><em>[</em><em>str</em><em>, </em><em>str</em><em> | </em><em>int</em><em> | </em><em>float</em><em> | </em><em>bool</em><em>]</em>)</p></li>\n<li><p><strong>graph_config</strong> (<em>dict</em><em>[</em><em>str</em><em>, </em><em>str</em><em> | </em><em>int</em><em> | </em><em>float</em><em> | </em><em>bool</em><em>]</em>)</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.three_d.polyhedra.Polyhedron.create_faces\">\n<span class=\"sig-name descname\"><span class=\"pre\">create_faces</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">face_coords</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/three_d/polyhedra/#Polyhedron.create_faces\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron.create_faces\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Creates VGroup of faces from a list of face coordinates.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><strong>face_coords</strong> (<em>list</em><em>[</em><em>list</em><em>[</em><em>list</em><em> | </em><em>ndarray</em><em>]</em><em>]</em>)</p>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p><a class=\"reference internal\" href=\"../manim.mobject.types.vectorized_mobject.VGroup/#manim.mobject.types.vectorized_mobject.VGroup\" title=\"manim.mobject.types.vectorized_mobject.VGroup\"><em>VGroup</em></a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.three_d.polyhedra.Polyhedron.extract_face_coords\">\n<span class=\"sig-name descname\"><span class=\"pre\">extract_face_coords</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/three_d/polyhedra/#Polyhedron.extract_face_coords\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron.extract_face_coords\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Extracts the coordinates of the vertices in the graph.\nUsed for updating faces.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p>list[list[<em>ndarray</em>]]</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"manim.mobject.three_d.polyhedra.Polyhedron.get_edges\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_edges</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">faces_list</span></span></em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../_modules/manim/mobject/three_d/polyhedra/#Polyhedron.get_edges\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron.get_edges\" title=\"Link to this definition\">\u00b6</a></dt>\n<dd><p>Creates list of cyclic pairwise tuples.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p><strong>faces_list</strong> (<em>list</em><em>[</em><em>list</em><em>[</em><em>int</em><em>]</em><em>]</em>)</p>\n</dd>\n<dt class=\"field-even\">Return type<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><p>list[tuple[int, int]]</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n", "metatags": "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/manim.mobject.three_d.polyhedra.Tetrahedron", "Tetrahedron", "N", "next"], ["reference/manim.mobject.three_d.polyhedra.Octahedron", "Octahedron", "P", "previous"]], "sourcename": "reference/manim.mobject.three_d.polyhedra.Polyhedron.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Polyhedron</a><ul>\n<li><a class=\"reference internal\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Polyhedron</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron._original__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Polyhedron._original__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron.create_faces\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Polyhedron.create_faces()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron.extract_face_coords\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Polyhedron.extract_face_coords()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#manim.mobject.three_d.polyhedra.Polyhedron.get_edges\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Polyhedron.get_edges()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/manim.mobject.three_d.polyhedra.Polyhedron", "sidebars": ["sidebar/brand.html", "sidebar/search.html", "sidebar/scroll-start.html", "sidebar/navigation.html", "sidebar/ethical-ads.html", "sidebar/scroll-end.html", "sidebar/variant-selector.html"], "alabaster_version": "1.0.0", "alabaster_version_info": [1, 0, 0], "furo_version": "2024.08.06", "furo_navigation_tree": "", "furo_hide_toc": false, "furo_pygments": {"light": {"background": "#f8f8f8", "foreground": "black"}, "dark": {"background": "#202020", "foreground": "#d0d0d0"}}}